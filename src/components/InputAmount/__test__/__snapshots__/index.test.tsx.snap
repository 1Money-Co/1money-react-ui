// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InputAmount renders correctly 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="om-react-ui-input-amount-wrapper"
      >
        <div
          class="om-react-ui-input-amount"
        >
          <span
            class="om-react-ui-input-amount-prefix"
          >
            $
          </span>
          <span
            class="om-react-ui-input-amount-element p-inputnumber p-component p-inputwrapper"
            data-pc-name="inputnumber"
            data-pc-section="root"
            style="--input-width: 33px;"
          >
            <input
              class="p-inputnumber-input p-inputtext p-component"
              data-pc-name="inputtext"
              data-pc-section="root"
              inputmode="numeric"
              placeholder="0"
              role="spinbutton"
              type="text"
              value=""
            />
          </span>
          <span
            class="om-react-ui-input-amount-currency"
          >
            USD
          </span>
          <span
            class="om-react-ui-input-amount-suffix"
          >
            <span
              style="padding: 12px; border-radius: 12px; background-color: rgb(240, 240, 240); color: rgb(19, 19, 19); font-size: 12px; cursor: pointer;"
            >
              Max
            </span>
          </span>
          <span
            class="om-react-ui-input-amount-fake"
          />
        </div>
        <div
          class="om-react-ui-input-amount-extra"
        >
          <span
            class="om-react-ui-input-amount-message"
          >
            <span
              style="display: inline-flex; align-items: center; gap: 4px;"
            >
              Amount exceeds maximum. The maximum purchase amount is $10,000 USD
            </span>
          </span>
          <span
            class="om-react-ui-input-amount-footnote"
          >
            <span
              style="display: inline-flex; align-items: center; gap: 4px; cursor: pointer; color: rgb(7, 51, 135);"
            >
              0 USDT
            </span>
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="om-react-ui-input-amount-wrapper"
    >
      <div
        class="om-react-ui-input-amount"
      >
        <span
          class="om-react-ui-input-amount-prefix"
        >
          $
        </span>
        <span
          class="om-react-ui-input-amount-element p-inputnumber p-component p-inputwrapper"
          data-pc-name="inputnumber"
          data-pc-section="root"
          style="--input-width: 33px;"
        >
          <input
            class="p-inputnumber-input p-inputtext p-component"
            data-pc-name="inputtext"
            data-pc-section="root"
            inputmode="numeric"
            placeholder="0"
            role="spinbutton"
            type="text"
            value=""
          />
        </span>
        <span
          class="om-react-ui-input-amount-currency"
        >
          USD
        </span>
        <span
          class="om-react-ui-input-amount-suffix"
        >
          <span
            style="padding: 12px; border-radius: 12px; background-color: rgb(240, 240, 240); color: rgb(19, 19, 19); font-size: 12px; cursor: pointer;"
          >
            Max
          </span>
        </span>
        <span
          class="om-react-ui-input-amount-fake"
        />
      </div>
      <div
        class="om-react-ui-input-amount-extra"
      >
        <span
          class="om-react-ui-input-amount-message"
        >
          <span
            style="display: inline-flex; align-items: center; gap: 4px;"
          >
            Amount exceeds maximum. The maximum purchase amount is $10,000 USD
          </span>
        </span>
        <span
          class="om-react-ui-input-amount-footnote"
        >
          <span
            style="display: inline-flex; align-items: center; gap: 4px; cursor: pointer; color: rgb(7, 51, 135);"
          >
            0 USDT
          </span>
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
